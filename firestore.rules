rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Use custom claims for roles (faster, no Firestore lookup, no race conditions)
    function getUserRole() {
      return request.auth.token.role;
    }

    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.role == 'admin' &&
             request.auth.token.isApproved == true;
    }

    function isTechnician() {
      return isAuthenticated() && request.auth.token.role == 'technician';
    }

    function isSupplier() {
      return isAuthenticated() && request.auth.token.role == 'supplier';
    }

    // Fallback: Check user role from Firestore (for cases without custom claims)
    function getUserRoleFromDb() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdminDb() {
      return isAuthenticated() &&
             getUserRoleFromDb() == 'admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }

    function isSupplierDb() {
      return isAuthenticated() &&
             getUserRoleFromDb() == 'supplier' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);

      // Users can create their own profile during registration
      allow create: if isOwner(userId) &&
                      request.resource.data.uid == userId &&
                      request.resource.data.email == request.auth.token.email;

      // Users can update their own profile
      allow update: if isOwner(userId);

      // Suppliers can read their own profile for dashboard stats
      allow read: if (isSupplier() || isSupplierDb()) && userId == request.auth.uid;

      // Admins can read/update all profiles (try custom claims first, fallback to DB)
      allow read, update: if isAdmin() || isAdminDb();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Customers can read their own bookings
      allow read: if isAuthenticated() &&
                    resource.data.customerId == request.auth.uid;

      // Customers can create bookings for themselves
      allow create: if isAuthenticated() &&
                      request.resource.data.customerId == request.auth.uid;

      // Customers can update their own pending bookings (for cancellation)
      allow update: if isAuthenticated() &&
                      resource.data.customerId == request.auth.uid &&
                      resource.data.status == 'pending';

      // Customers can add ratings to their own completed bookings
      allow update: if isAuthenticated() &&
                      resource.data.customerId == request.auth.uid &&
                      resource.data.status == 'completed' &&
                      // Only allow updating rating fields
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customerRating', 'customerReview', 'updatedAt']);

      // Technicians can read bookings assigned to them
      allow read: if isAuthenticated() &&
                    resource.data.technicianId == request.auth.uid;

      // Technicians can update bookings assigned to them (status, notes, photos)
      allow update: if isAuthenticated() &&
                      resource.data.technicianId == request.auth.uid;

      // Admins have full access to all bookings (try custom claims first, fallback to DB)
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Products collection (for future e-commerce)
    match /products/{productId} {
      // Everyone can read products
      allow read: if true;

      // Only suppliers and admins can create products
      allow create: if isSupplier() || isSupplierDb() || isAdmin() || isAdminDb();

      // Suppliers, admins, and authenticated users (for stock updates during orders) can update
      // Stock updates are allowed for authenticated users during checkout
      allow update: if isSupplier() || isSupplierDb() || isAdmin() || isAdminDb() || isAuthenticated();

      // Only admins can delete products
      allow delete: if isAdmin() || isAdminDb();
    }

    // Orders collection (for e-commerce)
    match /orders/{orderId} {
      // Customers can read their own orders (no DB lookup - instant!)
      allow read: if isAuthenticated() &&
                    resource.data.customerId == request.auth.uid;

      // Customers can create orders for themselves (no DB lookup - instant!)
      allow create: if isAuthenticated() &&
                      request.resource.data.customerId == request.auth.uid;

      // Customers can update their own orders for cancellation (no DB lookup - instant!)
      allow update: if isAuthenticated() &&
                      resource.data.customerId == request.auth.uid;

      // Suppliers can read and update orders for their products (for fulfillment)
      allow read, update: if isSupplier() || isSupplierDb();

      // Admins have full access (try custom claims first for speed, fallback to DB)
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Supplier catalog collection (inventory owned by suppliers)
    match /supplier_catalog/{itemId} {
      // Suppliers can read ALL catalog items (needed for linking and viewing marketplace)
      allow read: if isSupplier() || isSupplierDb();

      // Suppliers can add new catalog items for themselves
      allow create: if (isSupplier() || isSupplierDb()) &&
                      request.resource.data.supplierId == request.auth.uid;

      // Suppliers can update or remove only their own items
      allow update, delete: if (isSupplier() || isSupplierDb()) &&
                              resource.data.supplierId == request.auth.uid;

      // Admins can manage all supplier catalog entries
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Courses collection (for training portal)
    match /courses/{courseId} {
      // Everyone can read courses
      allow read: if true;

      // Only admins can create/update/delete courses
      allow create, update, delete: if isAdmin() || isAdminDb();
    }

    // Enrollments collection (trainee course enrollments)
    match /enrollments/{enrollmentId} {
      // Trainees can read their own enrollments
      allow read: if isAuthenticated() &&
                    resource.data.traineeId == request.auth.uid;

      // Trainees can create enrollments for themselves
      allow create: if isAuthenticated() &&
                      request.resource.data.traineeId == request.auth.uid;

      // Trainees can update their progress
      allow update: if isAuthenticated() &&
                      resource.data.traineeId == request.auth.uid;

      // Admins have full access
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Reviews collection (for product reviews)
    match /reviews/{reviewId} {
      // Everyone can read reviews
      allow read: if true;

      // Customers can create reviews for their own orders
      allow create: if isAuthenticated() &&
                      request.resource.data.customerId == request.auth.uid;

      // Customers can update their own reviews
      allow update: if isAuthenticated() &&
                      resource.data.customerId == request.auth.uid;

      // Admins can manage all reviews
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Returns collection (for return/refund requests)
    match /returns/{returnId} {
      // Customers can read their own return requests
      allow read: if isAuthenticated() &&
                    resource.data.customerId == request.auth.uid;

      // Customers can create return requests for their own orders
      allow create: if isAuthenticated() &&
                      request.resource.data.customerId == request.auth.uid;

      // Admins can manage all return requests
      allow read, write: if isAdmin() || isAdminDb();
    }

    // Settings collection (platform configuration)
    match /settings/{settingId} {
      // Anyone can read settings (needed for public-facing features like business hours)
      allow read: if true;

      // Only admins can update settings (try custom claims first for speed, fallback to DB)
      allow write: if isAdmin() || isAdminDb();
    }

    // Revenue collection (for tracking platform earnings)
    match /revenue/{revenueId} {
      // Technicians can create revenue records when completing jobs
      allow create: if isTechnician();

      // Admins can read all revenue records
      allow read: if isAdmin() || isAdminDb();

      // Only admins can update/delete revenue records
      allow update, delete: if isAdmin() || isAdminDb();
    }

    // Price change notifications collection
    match /priceChangeNotifications/{notificationId} {
      // Anyone authenticated can read notifications
      allow read: if isAuthenticated();

      // Only admins can create/update/delete notifications
      allow write: if isAdmin() || isAdminDb();
    }

    // Aggregated analytics collections
    match /analytics_daily/{dateKey} {
      // Allow the analytics dashboard (admin) to read summaries; write restricted to admins
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isAdminDb();
    }

    match /analytics_top_products/{docId} {
      // Allow dashboard widgets to read top products
      allow read: if true;
      allow write: if isAdmin() || isAdminDb();
    }

    // Chat messages collection (for live support)
    match /chats/{chatId}/messages/{messageId} {
      // Users can read messages in their own chats
      allow read: if isAuthenticated() &&
                    get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid;

      // Users can send messages in their own chats
      allow create: if isAuthenticated() &&
                      get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid;

      // Admins and support staff can read all messages
      allow read: if isAdmin() || isAdminDb();

      // Admins can send messages in any chat
      allow create: if isAdmin() || isAdminDb();
    }

    // Products collection (for e-commerce) - duplicate removed, already handled above
    // match /products/{productId} {
    //   allow read: if true;
    //   allow create: if isSupplier() || isAdmin();
    //   allow update: if isSupplier() || isAdmin() || isAuthenticated();
    //   allow delete: if isAdmin();
    // }

    // Orders collection (for e-commerce) - duplicate removed, already handled above
    // match /orders/{orderId} {
    //   allow read: if isAuthenticated() && resource.data.customerId == request.auth.uid;
    //   allow create: if isAuthenticated() && request.resource.data.customerId == request.auth.uid;
    //   allow update: if isAuthenticated() && resource.data.customerId == request.auth.uid;
    //   allow read: if isSupplier();
    //   allow read, write: if isAdmin();
    // }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
